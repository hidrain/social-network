{"version":3,"sources":["components/profile/myposts/myposts.module.css","components/profile/myposts/post/post.module.css","components/header/header.module.css","api/api.ts","reportWebVitals.js","api/security-api.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/dialogs-reducer.ts","api/profile-api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","redux/users-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/news/news.tsx","components/music/music.jsx","components/settings/settings.jsx","components/dialogs/dialog-item/dialog-item.tsx","components/dialogs/message/message.tsx","utils/validators/validators.ts","components/common/forms-controls/forms-controls.tsx","components/dialogs/add-message-form/add-message-form.tsx","components/dialogs/dialogs.tsx","components/hoc/with-auth-redirect.tsx","components/dialogs/dialogs-container.tsx","redux/users-selectors.ts","assets/images/left.svg","assets/images/right.svg","components/common/paginator/paginator.tsx","assets/images/user_avatar.png","components/users/user.tsx","components/users/users-search-form.tsx","components/users/users.tsx","assets/images/preloader.svg","components/common/preloader/preloader.tsx","components/users/users-container.tsx","components/profile/myposts/post/post.tsx","components/profile/myposts/add-post-form/add-post-form.tsx","components/profile/myposts/myposts.tsx","components/profile/myposts/myposts-container.tsx","components/profile/profile-info/profile-status-with-hooks.tsx","components/profile/profile-info/profile-data-form.tsx","components/profile/profile-info/profile-info.tsx","components/profile/profile.tsx","components/profile/profile-container.tsx","components/login/login.tsx","redux/auth-selectors.ts","components/header/header.tsx","pages/chat/chat-page.tsx","App.tsx","index.tsx","components/dialogs/dialogs.module.css","components/users/users.module.css","components/profile/profile-info/profile-info.module.css","components/common/paginator/paginator.module.css","components/common/forms-controls/forms-controls.module.css"],"names":["module","exports","ResultCodesEnum","ResultCodeForCaptcha","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","securityAPI","get","response","data","authAPI","email","password","rememberMe","captcha","post","delete","initialState","id","login","isAuth","captchaUrl","actions","type","getAuthUserData","dispatch","a","resultCode","Success","getCaptchaUrl","url","dialogs","name","messages","message","profileAPI","responce","status","put","photoFile","formData","FormData","append","profile","posts","likeCount","addPostActionCreator","newPostText","deletePostActionCreator","postId","setUserProfile","setStatus","savePhotoSuccess","photos","getUserProfile","userId","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalItemsCount","isFetching","followingInProgress","filter","payload","totalCount","requestUsers","getState","items","_followUnfollowFlow","apiMethod","actionCreator","initialized","rootReducer","combineReducers","profilePage","state","action","newPost","p","dialogsPage","body","newMessageBody","sidebar","usersPage","map","u","followed","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","News","Music","Settings","DialogItem","path","className","classes","dialog","active","avatar","alt","src","to","Message","required","value","maxLengthCreator","maxlength","length","FormControl","meta","children","hasError","touched","error","style","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","Field","validate","maxLength50","reduxForm","onSubmit","handleSubmit","Dialogs","dialogsElements","messagesElements","dialogsItems","values","sendMessage","mapStateToPropsForRedirect","withAuthRedirect","Component","RedirectComponent","this","replace","React","connect","DialogsContainer","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","button_arrow","arrow_left","selectedPage","notSelectedPage","arrow_right","User","user","userWrapper","userAvatar","small","userPhoto","userButton","disabled","some","userProfile","userInfo","userStatus","userFrom","usersSearchFormValidate","UsersSearchForm","memo","useSelector","enableReinitialize","initialValues","setSubmitting","onFilterChanged","isSubmitting","as","Users","useDispatch","navigate","useNavigate","useSearchParams","searchParams","useEffect","page","actualPage","actualFilter","Number","userUnfollow","bind","userFollow","pageNumber","Preloader","preloader","UsersPage","Post","item","friends","MyPosts","console","log","postsElements","postsBlock","addPost","MyPostsContainer","ProfileStatusWithHooks","editMode","setEditMode","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataReduxForm","form_summary_error","Object","keys","contacts","key","contact","ProfileInfo","isOwner","savePhoto","saveProfile","descriptionBlock","avaImg","large","target","files","goToEditMode","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Profile","AuthRedirectComponent","refreshProfile","match","params","authorizedUserId","getStatus","prevProps","prevState","ProfileContainer","file","Error","stopSubmit","_error","Promise","reject","useMatch","LoginReduxForm","LoginPage","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","Header","Layout","padding","span","backgroundColor","icon","UserOutlined","ChatPage","Chat","wsChannel","setWsChannel","ws","closeHandler","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","setMessages","messageHandler","newMessages","JSON","parse","prevMessages","height","overflowY","m","index","photo","width","userName","AddMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","send","Content","Sider","Footer","App","catchAllUnhandledErrors","alert","initializeApp","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","background","theme","mode","defaultSelectedKeys","margin","Item","MessageOutlined","CommentOutlined","TeamOutlined","GlobalOutlined","SoundOutlined","SettingOutlined","minHeight","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16c7f55e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myposts_postsBlock__Mxr-7\",\"posts\":\"myposts_posts__3_aCU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__2jLb3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__v9FKw\",\"loginBlock\":\"header_loginBlock__39tD3\",\"name\":\"header_name__1qEgi\"};","import axios from 'axios'\nimport { UserType } from '../types/types'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n    headers: {\n        \"API-KEY\": \"4cca9709-ede7-4ae0-850a-2da3e98f37e8\"\n    }\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\nexport enum ResultCodeForCaptcha {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\n\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { instance } from \"./api\"\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return (\n            instance.get<GetCaptchaUrlResponseType>('security/get-captcha-url')\n        )\n            .then(response => response.data)\n    }\n}","import { instance, APIResponseType, ResultCodeForCaptcha, ResultCodesEnum } from \"./api\"\n\ntype MeResponseDataType = {\n    id: number,\n    email: string,\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return (\n            instance.get<APIResponseType<MeResponseDataType>>('auth/me')\n        )\n            .then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return (\n            instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>('auth/login', { email, password, rememberMe, captcha })\n        )\n            .then(response => response.data)\n    },\n    logout() {\n        return (\n            instance.delete('auth/login')\n        )\n            .then(response => response.data)\n    }\n}","import { securityAPI } from './../api/security-api';\nimport { authAPI } from './../api/auth-api';\nimport { ResultCodeForCaptcha, ResultCodesEnum } from \"../api/api\"\nimport { FormAction, stopSubmit } from 'redux-form'\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\"\n\nexport type InitialStateType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n    captchaUrl: string | null\n}\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction> //FormAction - другие импортируемые actions\n\nlet initialState: InitialStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null //if null - captcha isn't required\n}\n\nexport const authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch (action.type) {\n        case 'auth/SENT_USER_DATA':\n        case 'auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.data\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'auth/SENT_USER_DATA', data: { id, email, login, isAuth }\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'auth/GET_CAPTCHA_URL_SUCCESS', data: { captchaUrl }\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await authAPI.me()\n    if (data.resultCode === ResultCodesEnum.Success) {\n        let { id, email, login } = data.data\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await authAPI.login(email, password, rememberMe, captcha)\n    if (data.resultCode === ResultCodesEnum.Success) {\n        //success, get auth data\n        dispatch(getAuthUserData())\n    }\n    else {\n        if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl())\n        }\n        let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\n        dispatch(stopSubmit('login', { _error: message }))\n    }\n}\n\nexport const logout = (): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await authAPI.logout()\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\n\n","import { InferActionsTypes } from \"./redux-store\"\n\ntype DialogType = {\n    id: number,\n    name: string\n}\ntype MessageType = {\n    id: number,\n    message: string\n}\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\n\nlet initialState = {\n    dialogs: [\n        { id: 1, name: 'Dima' },\n        { id: 2, name: 'Andrew' },\n        { id: 3, name: 'Sveta' },\n        { id: 4, name: 'Sasha' },\n        { id: 5, name: 'Viktor' },\n        { id: 6, name: 'Valera' }\n    ] as Array<DialogType>,\n    messages: [\n        { id: 1, message: 'Hi' },\n        { id: 2, message: 'How are you?' },\n        { id: 3, message: 'Fine, and you?' },\n        { id: 4, message: 'Nice' },\n        { id: 5, message: 'Good' }\n    ] as Array<MessageType>,\n}\n\nexport const dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch (action.type) {\n        case 'dialogs/SEND-MESSAGE':\n            let body = action.newMessageBody\n            return {\n                ...state,\n                messages: [...state.messages, { id: 6, message: body }],\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => {\n        return {\n            type: 'dialogs/SEND-MESSAGE',\n            newMessageBody\n        } as const\n    }\n}\n","import { instance, APIResponseType } from \"./api\"\nimport { PhotosType, ProfileType } from '../types/types'\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(id: number) {\n        return (\n            instance.get<ProfileType>(`profile/${id}`)\n        )\n            .then(responce => responce.data)\n    },\n    getStatus(id: number) {\n        return (\n            instance.get<string>(`profile/status/${id}`)\n        )\n            .then(responce => responce.data)\n    },\n    updateStatus(status: string) {\n        return (\n            instance.put<APIResponseType>('profile/status', { status: status })\n        )\n            .then(responce => responce.data)\n    },\n    savePhoto(photoFile: any) {\n        const formData = new FormData()\n        formData.append('image', photoFile)\n        return (\n            instance.put<APIResponseType<SavePhotoResponseDataType>>('profile/photo', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            })\n        )\n            .then(responce => responce.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return (\n            instance.put<APIResponseType>('profile', profile)\n        )\n            .then(responce => responce.data)\n    }\n}","import { profileAPI } from './../api/profile-api';\nimport { PhotosType } from './../types/types';\nimport { FormAction, stopSubmit } from \"redux-form\"\nimport { PostType, ProfileType } from \"../types/types\"\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n\nlet initialState = {\n    posts: [\n        { id: 1, message: 'Hi, how are you?', likeCount: 12 },\n        { id: 2, message: 'It is my first post', likeCount: 11 },\n        { id: 3, message: 'bla bla', likeCount: 11 },\n        { id: 4, message: 'da da da', likeCount: 11 }\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: ''\n}\n\nexport const profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'profile/ADD_POST':\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likeCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            }\n        case 'profile/DELETE_POST':\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId),\n            }\n        case 'profile/SET_USER_PROFILE':\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case 'profile/SET_STATUS':\n            return {\n                ...state,\n                status: action.status\n            }\n        case 'profile/SAVE_PHOTO_SUCCSESS':\n            return {\n                ...state,\n                profile: { ...state.profile, photos: action.photos } as ProfileType\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({ type: 'profile/ADD_POST', newPostText } as const),\n    deletePostActionCreator: (postId: number) => ({ type: 'profile/DELETE_POST', postId } as const),\n    setUserProfile: (profile: ProfileType) => ({ type: 'profile/SET_USER_PROFILE', profile } as const),\n    setStatus: (status: string) => ({ type: 'profile/SET_STATUS', status } as const),\n    savePhotoSuccess: (photos: PhotosType) => ({ type: 'profile/SAVE_PHOTO_SUCCSESS', photos } as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await profileAPI.updateStatus(status)\n    if (data.resultCode === 0) {\n        dispatch(actions.setStatus(status))\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => { // ThunkCreator\n    const data = await profileAPI.savePhoto(file)\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => { // ThunkCreator\n    const userId = getState().auth.id\n    const data = await profileAPI.saveProfile(profile)\n    if (data.resultCode === 0) {\n        if (userId !== null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(`userId can't be null`)\n        }\n    } else {\n        // let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\n        // dispatch(stopSubmit('edit-profile', { 'contacts': { 'facebook': data.messages[0] } })) верный вариант!\n        //ПОСЛЕ РАСПАРСИТЬ ОБЪЕКТ\n\n        dispatch(stopSubmit('edit-profile', { _error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}","let initialState = {}\n\ntype InitialStateType = typeof initialState\n\nexport const sidebarReducer = (state = initialState, action: any): InitialStateType => {\n\n    return state\n}","import { GetItemsType, instance, APIResponseType } from \"./api\"\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return (\n            instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\n        )\n            .then(response => response.data)\n    },\n    follow(id: number) {\n        return (\n            instance.post<APIResponseType>(`follow/${id}`, {})\n        )\n            .then(response => response.data)\n    },\n    unfollow(id: number) {\n        return (\n            instance.delete(`follow/${id}`)\n        )\n            .then(response => response.data) as Promise<APIResponseType>\n    }\n}\n","import { usersAPI } from './../api/users-api';\nimport { Dispatch } from \"redux\"\nimport { UserType } from \"../types/types\"\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\"\nimport { APIResponseType } from '../api/api';\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\nexport type FilterType = typeof initialState.filter\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalItemsCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users id\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nexport const usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch (action.type) {\n        case 'users/FOLLOW':\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: true }\n                    }\n                    return u\n                })\n            }\n\n        case 'users/UNFOLLOW':\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: false }\n                    }\n                    return u\n                })\n            }\n\n        // OLD VERSION FOLLOW/UNFOLLOW\n        // case FOLLOW:\n        //     return {\n        //         ...state,\n        //         users: state.users.map(u => {\n        //             if (u.id === action.userId) {\n        //                 return { ...u, followed: true }\n        //             }\n        //             return u\n        //         })\n        //     }\n\n        // case UNFOLLOW:\n        //     return {\n        //         ...state,\n        //         users: state.users.map(u => {\n        //             if (u.id === action.userId) {\n        //                 return { ...u, followed: false }\n        //             }\n        //             return u\n        //         })\n        //     }\n\n        case 'users/SET_USERS':\n            return { ...state, users: action.users } //перезаписать всех пользователей на пришедших из запроса\n        // return { ...state, users: [...state.users, ...action.users] } //дописать массив пользователей\n\n        case 'users/SET_CURRENT_PAGE':\n            return { ...state, currentPage: action.currentPage }\n\n        case 'users/SET_FILTER':\n            return { ...state, filter: action.payload }\n\n        case 'users/SET_TOTAL_USERS_COUNT':\n            return { ...state, totalItemsCount: action.totalCount }\n\n        case 'users/TOGGLE_IS_FETCHING':\n            return { ...state, isFetching: action.isFetching }\n\n        case 'users/TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({ type: 'users/FOLLOW', userId } as const),\n    unfollowSuccess: (userId: number) => ({ type: 'users/UNFOLLOW', userId } as const),\n    setUsers: (users: Array<UserType>) => ({ type: 'users/SET_USERS', users } as const),\n    setCurrentPage: (currentPage: number) => ({ type: 'users/SET_CURRENT_PAGE', currentPage } as const),\n    setFilter: (filter: FilterType) => ({ type: 'users/SET_FILTER', payload: filter } as const),\n    totalItemsCount: (totalCount: number) => ({ type: 'users/SET_TOTAL_USERS_COUNT', totalCount } as const),\n    toggleIsFetching: (isFetching: boolean) => ({ type: 'users/TOGGLE_IS_FETCHING', isFetching, } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: 'users/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId } as const)\n}\n\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => { // ThunkCreator\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(currentPage))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.totalItemsCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, id: number,\n    apiMethod: (id: number) => Promise<APIResponseType>,\n    actionCreator: (id: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, id))\n    let data = await apiMethod(id)\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(id))\n    }\n    dispatch(actions.toggleFollowingProgress(false, id))\n}\n\nexport const follow = (id: number): ThunkType => { // ThunkCreator\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, id, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (id: number): ThunkType => { // ThunkCreator\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, id, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\n// OLD VERSION FOLLOW/UNFOLLOW\n\n// export const follow = (id) => { // ThunkCreator\n//     return async (dispatch) => {\n//         dispatch(toggleFollowingProgress(true, id))\n\n//         let data = await usersAPI.follow(id)\n//         if (data.resultCode === 0) {\n//             dispatch(followSuccess(id))\n//         }\n//         dispatch(toggleFollowingProgress(false, id))\n//     }\n// }\n\n// export const unfollow = (id) => { // ThunkCreator\n//     return async (dispatch) => {\n\n//         dispatch(toggleFollowingProgress(true, id))\n\n//         let data = await usersAPI.unfollow(id)\n//         if (data.resultCode === 0) {\n//             dispatch(unfollowSuccess(id))\n//         }\n//         dispatch(toggleFollowingProgress(false, id))\n//     }\n// }","\nimport { getAuthUserData } from \"./auth-reducer\"\nimport { InferActionsTypes } from \"./redux-store\"\n\nlet initialState = {\n    initialized: false\n}\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nexport const appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'app/INITIALIZED-SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({ type: 'app/INITIALIZED-SUCCESS' } as const)\n}\n\nexport const initializeApp = () => { // ThunkCreator\n    return (dispatch: any) => {\n\n        let promise = dispatch(getAuthUserData())\n        promise.then(() => {\n            dispatch(actions.initializedSuccess())\n        })\n    }\n}\n\n","import thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { Action, createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport { authReducer } from './auth-reducer'\nimport { dialogsReducer } from \"./dialogs-reducer\"\nimport { profileReducer } from \"./profile-reducer\"\nimport { sidebarReducer } from \"./sidebar-reducer\"\nimport { usersReducer } from './users-reducer'\nimport { reducer as formReducer } from 'redux-form'\nimport { appReducer } from './app-reducer'\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware))) //composeEnhancers - подключение расширения для хрома Redux DevTools\n\n// export let store = createStore(reducers, applyMiddleware(thunkMiddleware))\n\n//@ts-ignore\nwindow.__store__ = store","export const News = () => {\n    return (\n        <div>\n            News\n        </div>\n    );\n}","export const Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    );\n}","\nexport const Settings = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    );\n}","import { NavLink } from 'react-router-dom';\nimport classes from './../dialogs.module.css'\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nexport const DialogItem: React.FC<PropsType> = ({ id, name }) => {\n\n    let path = '/dialogs/' + id;\n\n    return (\n\n        <div className={classes.dialog + ' ' + classes.active}>\n            <img className={classes.avatar} alt='' src='https://cdn2.iconfinder.com/data/icons/scenarium-vol-4/128/011_avatar_anonymous_profile_privacy_hacker_mask_hoodie-512.png' />\n            <NavLink to={path}>{name}</NavLink>\n        </div >\n    );\n}\n\nexport default DialogItem","import classes from './../dialogs.module.css'\n\ntype PropsType = {\n    message: string\n}\n\nexport const Message: React.FC<PropsType> = ({ message }) => {\n    return (\n        <div className={classes.message}>{message}</div>\n    );\n}\n\n\n","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) {\n        return undefined\n    }\n    return 'Field is required'\n}\n\n\nexport const maxLengthCreator = (maxlength: number): FieldValidatorType => (value) => {\n    if (value && value.length > maxlength) {\n        return `Max length is ${maxlength} symbols`\n    }\n    return undefined\n}","import { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form'\nimport { FieldValidatorType } from '../../../utils/validators/validators'\nimport style from './forms-controls.module.css'\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({ meta, children }) => {\n\n    const hasError = meta.touched && meta.error\n    return (\n        <div>\n            <div className={(hasError ? style.error : '')}>\n                {children}\n            </div>\n            {hasError && <span className={style.error}> {meta.error} </span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    // const { input, meta, child, ...restProps } = props\n    const { input, meta, ...restProps } = props\n    return <FormControl {...props}> <textarea {...input} {...restProps} /> </FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    // const { input, meta, child, ...restProps } = props\n    const { input, meta, ...restProps } = props\n    return <FormControl {...props}> <input {...input} {...restProps} /> </FormControl>\n}\n\nexport type LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\n// type LoginFormValuesTypeKeys = keyof LoginFormValuesType\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n    name: FormKeysType,\n    validators: Array<FieldValidatorType>,\n    component: React.FC<WrappedFieldProps>,\n    props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder}\n            name={name}\n            validate={validators}\n            component={component}\n            {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","import { Field, InjectedFormProps, reduxForm } from \"redux-form\"\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\"\nimport { Textarea } from \"../../common/forms-controls/forms-controls\"\nimport { NewMessageFormValuesType } from '../dialogs'\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                    validate={[required, maxLength50]}\n                    placeholder='Enter your message' name=\"newMessageBody\" />\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({ form: 'dialog-add-message-form' })(AddMessageForm);","import classes from './dialogs.module.css'\nimport DialogItem from './dialog-item/dialog-item'\nimport { Message } from './message/message'\nimport AddMessageForm from './add-message-form/add-message-form'\nimport { InitialStateType } from '../../redux/dialogs-reducer'\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\nexport const Dialogs: React.FC<PropsType> = (props) => {\n\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(({ name, id }) => <DialogItem name={name} id={id} key={id} />)\n    let messagesElements = state.messages.map(({ message, id }) => <Message message={message} key={id} />)\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n\n            <div className={classes.messages}>\n                {messagesElements}\n                <AddMessageForm onSubmit={addNewMessage} />\n            </div>\n        </div>\n    );\n}\n\nexport default Dialogs;\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { AppStateType } from '../../redux/redux-store'\n\n// type MapPropsType = {\n//     isAuth: boolean\n// }\n// type DispatchPropsType = {}\n\n// let mapStateToPropsForRedirect = (state: AppStateType) => ({\n//     isAuth: state.auth.isAuth\n// })\n\n// export function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType) {\n//     const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n//         let { isAuth, ...restProps } = props\n\n//         if (!isAuth) return <Navigate replace to='/login' />\n//         return <WrappedComponent {...restProps as WCP} />\n//     }\n\n//     let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\n//         mapStateToPropsForRedirect)(RedirectComponent)\n\n//     return ConnectedAuthRedirectComponent\n// }\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component: React.ComponentType) => {\n    class RedirectComponent extends React.Component<MapStatePropsType> {\n        render() {\n            if (!this.props.isAuth) return <Navigate replace to={\"/login\"} />;\n\n            return <Component {...this.props} />\n        }\n    }\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}","import { actions } from '../../redux/dialogs-reducer'\nimport Dialogs from './dialogs'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { withAuthRedirect } from '../hoc/with-auth-redirect'\nimport { AppStateType } from '../../redux/redux-store'\n\n//данные state\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        // newMessageBody: state.dialogsPage.newMessageBody,\n    }\n}\n//callbacks\n\nexport const DialogsContainer = compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, { ...actions })\n)(Dialogs)\n\n","import { createSelector } from 'reselect'\nimport { AppStateType } from './redux-store'\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users.filter(u => true)\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalItemsCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","export default __webpack_public_path__ + \"static/media/left.7822a1fb.svg\";","export default __webpack_public_path__ + \"static/media/right.060dcdd0.svg\";","import { useState } from 'react'\nimport style from './paginator.module.css'\nimport arrow_left from '../../../assets/images/left.svg'\nimport arrow_right from '../../../assets/images/right.svg'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nexport const Paginator: React.FC<PropsType> = ({ totalItemsCount, pageSize, currentPage = 1, onPageChanged = () => { }, portionSize = 15 }) => {\n\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages: Array<number> = []\n    for (let i = 1; i <= pagesCount; i++) {\n        // if (pages.length < 20) {\n        pages.push(i)\n        // }\n    }\n\n    const portionCount = Math.ceil(pagesCount / portionSize)\n    const [portionNumber, setPortionNumber] = useState(1)\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\n    const rightPortionPageNumber = portionNumber * portionSize\n\n\n    return (\n        <div className={style.pages}>\n\n            {/* {portionNumber > 2 &&\n                <button onClick={() => { setPortionNumber(1) }}>\n                    <img src={arrow_left} alt=''/>\n                </button>\n            } */}\n\n            {portionNumber > 1 &&\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }} className={style.button_arrow}>\n                    <img src={arrow_left} alt='' />\n                </button>\n            }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map(p => {\n                    return <span className={currentPage === p ? style.selectedPage : style.notSelectedPage}\n                        onClick={() => { onPageChanged(p) }} >{p} </span>\n                })}\n\n            {portionCount > portionNumber &&\n                <button onClick={() => { setPortionNumber(portionNumber + 1) }} className={style.button_arrow}>\n                    <img src={arrow_right} alt='' />\n                </button>\n            }\n            {/* {portionNumber > 1 &&\n                <button onClick={() => { setPortionNumber(portionNumber + 1) }}>\n                    <img src={arrow_right} alt=''/>\n                </button>\n            } */}\n\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/user_avatar.bb7611b5.png\";","import style from './users.module.css'\nimport userPhoto from '../../assets/images/user_avatar.png'\nimport { NavLink } from 'react-router-dom'\nimport { UserType } from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (id: number) => void\n    follow: (id: number) => void\n}\n\nexport const User: React.FC<PropsType> = ({ user, followingInProgress, unfollow, follow }) => {\n\n\n    return (\n        <div className={style.userWrapper}>\n            <div className={style.userAvatar}>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                            className={style.userPhoto} alt='' />\n                    </NavLink>\n                </div>\n                <div className={style.userButton}>\n                    {user.followed\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\n                            onClick={() => { follow(user.id) }}>Unfollow</button> //unfollow потому что в контейнерной компоненте мы создали follow\n\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\n                            onClick={() => { unfollow(user.id) }}>Follow</button>}\n                </div>\n            </div>\n\n            <div></div>\n\n            <div className={style.userProfile}>\n\n                <div className={style.userInfo}>\n                    <div>{user.name}</div>\n                    <div className={style.userStatus}>{user.status}</div>\n                </div>\n                <div className={style.userFrom}>\n                    <div>{'u.location.country'}</div>\n                    <div>{'u.location.city'}</div>\n                </div>\n            </div>\n\n        </div>)\n}\n","import React from 'react';\nimport { Field, Form, Formik } from \"formik\"\nimport { FilterType } from \"../../redux/users-reducer\"\nimport { useSelector } from 'react-redux';\nimport { getUsersFilter } from '../../redux/users-selectors';\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n\n    const filter = useSelector(getUsersFilter)\n\n    const submit = (values: FilterType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        props.onFilterChanged(values)\n        setSubmitting(false)\n    }\n\n    return (\n        <div>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{ term: filter.term, friend: filter.friend }}\n                validate={usersSearchFormValidate}\n                onSubmit={submit}\n            >\n                {({ isSubmitting }) => (\n                    <Form>\n                        <Field type='text' name='term' />\n                        <Field name='friend' as='select'>\n                            <option value='null'>All</option>\n                            <option value='true'>Only followed</option>\n                            <option value='false'>Only unfollowed</option>\n                        </Field>\n                        <button type='submit' disabled={isSubmitting}>\n                            Find\n                        </button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n})","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNavigate } from 'react-router'\nimport { FilterType, follow, requestUsers, unfollow } from '../../redux/users-reducer'\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsers, getUsersFilter } from '../../redux/users-selectors'\nimport { Paginator } from '../common/paginator/paginator'\nimport { User } from './user'\nimport { UsersSearchForm } from './users-search-form'\nimport { useSearchParams } from 'react-router-dom'\n\n\ntype PropsType = {}\n\nexport const Users: React.FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalItemsCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const [searchParams] = useSearchParams()\n\n    useEffect(() => {\n        const term = searchParams.get('term')\n        const friend = searchParams.get('friend')\n        const page = searchParams.get('page')\n\n        let actualPage = currentPage\n        let actualFilter = filter\n        if (page) actualPage = Number(page)\n        if (friend) actualFilter = {\n            ...actualFilter,\n            friend: friend === 'null' ? null : friend === 'true' ? true : false\n        }\n        if (term) actualFilter = {\n            ...actualFilter,\n            term: term,\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        navigate(`?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`)\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const userUnfollow = (id: number) => {\n        dispatch(follow(id))\n    }\n    const userFollow = (id: number) => {\n        dispatch(unfollow(id))\n    }\n\n\n    return (\n        <div>\n            <UsersSearchForm onFilterChanged={onFilterChanged} />\n\n            <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                totalItemsCount={totalItemsCount} pageSize={pageSize} />\n\n            <div>\n                {\n                    users.map(u =>\n                        <User user={u}\n                            key={u.id}\n                            followingInProgress={followingInProgress}\n                            unfollow={userUnfollow}\n                            follow={userFollow}\n                        />)\n                }\n            </div>\n        </div >\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/preloader.86b014ed.svg\";","import preloader from '../../../assets/images/preloader.svg'\n\nexport const Preloader: React.FC = () => {\n    return (\n        <img src={preloader} alt='' />\n    )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Users } from './users';\nimport { Preloader } from '../common/preloader/preloader';\nimport { getIsFetching } from '../../redux/users-selectors';\n\nexport const UsersPage: React.FC = () => {\n\n    const isFetching = useSelector(getIsFetching)\n\n    return (\n        <>\n            {isFetching ? <Preloader /> : null}\n            <Users />\n        </>\n    )\n}\n\n","import classes from './post.module.css';\n\ntype PropsType = {\n    message: string,\n    likeCount: number\n}\n\nconst Post: React.FC<PropsType> = ({ message, likeCount }) => {\n    return (\n        <div className={classes.item}>\n            <img src='https://cdn0.iconfinder.com/data/icons/seo-web-4-1/128/Vigor_User-Avatar-Profile-Photo-01-512.png' alt='' />\n\n            {message}\n\n            <div className={classes.friends}>\n                like {likeCount}\n            </div>\n        </div>\n    )\n}\nexport default Post\n","import { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from '../../../../utils/validators/validators'\nimport { Textarea } from \"../../../common/forms-controls/forms-controls\";\n\ntype PropsType = {}\nexport type AddPostFormValuesType = {\n    newPostText: string\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name={'newPostText'} placeholder={'Write a new post'}\n                    validate={[required, maxLength50]} />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({ form: 'profile-add-post' })(AddPostForm)\n","import classes from './myposts.module.css';\nimport Post from './post/post'\nimport AddPostForm, { AddPostFormValuesType } from './add-post-form/add-post-form';\nimport { PostType } from '../../../types/types';\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type MapDispatchType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & MapDispatchType> = (props) => {\n    console.log('RENDER')\n    console.log(props)\n\n    let postsElements = props.posts.map(({ message, likeCount, id }) => <Post message={message} likeCount={likeCount} key={id} />)\n\n    let onAddPost = (values: AddPostFormValuesType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={classes.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostForm onSubmit={onAddPost} />\n\n            <div className={classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n}\n\nexport default MyPosts\n","import { actions } from '../../../redux/profile-reducer'\nimport { connect } from 'react-redux'\nimport MyPosts, { MapDispatchType, MapPropsType } from './myposts';\nimport { AppStateType } from '../../../redux/redux-store';\n\n//данные state\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nexport const MyPostsContainer = connect<MapPropsType, MapDispatchType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts)","\nimport React, { useState, useEffect, ChangeEvent } from 'react'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n    // let stateWithSetState = useState(true)\n    // debugger\n    // let editMode = stateWithSetState[0]\n    // let setEditMode = stateWithSetState[1]\n\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || 'NO STATUS'} </span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\n                </div>\n            }\n        </div >\n    )\n}\n","\n// import { Preloader } from '../../common/preloader/preloader';\n// import userPhoto from '../../../assets/images/user_avatar.png'\n// import { ProfileStatusWithHooks } from './profile-status-with-hooks';\n// import { useState } from 'react';\nimport style from './profile-info.module.css'\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { createField, GetStringKeys, Input, Textarea } from '../../common/forms-controls/forms-controls';\nimport { ProfileType } from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (\n    { handleSubmit, profile, error }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div><button>Save</button></div>\n\n            {error && <div className={style.form_summary_error}>\n                {error}\n            </div>}\n\n            <div><b>Full name: </b>\n                {/* todo: create some solution for embedded objects */}\n                {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\n            </div>\n\n            <div><b>Looking for a job: </b>\n                {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\n            </div>\n\n            <div><b>My professonal skills: </b>\n                {createField<ProfileTypeKeys>('My professonal skills', 'lookingForAJobDescription', [], Textarea)}\n            </div>\n\n            <div><b>About me: </b>\n                {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\n            </div>\n\n            <div><b>Contacts: </b>{Object.keys(profile.contacts).map(key => {\n                return <div className={style.contact} key={key}>\n                    <b>{key}:</b> {createField(key, 'contacts.' + key, [], Input)}\n                </div>\n            })}</div>\n        </form>\n    )\n}\n\nexport const ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\n","\nimport { Preloader } from '../../common/preloader/preloader';\nimport style from './profile-info.module.css';\nimport userPhoto from '../../../assets/images/user_avatar.png'\nimport { ProfileStatusWithHooks } from './profile-status-with-hooks';\nimport { ChangeEvent, useState } from 'react';\nimport { ProfileDataReduxForm } from './profile-data-form';\nimport { ContactsType, ProfileType } from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nexport const ProfileInfo: React.FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n\n    let [editMode, setEditMode] = useState(false)\n\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {     //'?' если файл есть - берем его длину\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        //todo: remove then\n        saveProfile(formData).then(\n            () => { setEditMode(false) }\n        )\n    }\n\n\n    return (\n        <div>\n            <div className={style.descriptionBlock}>\n                <img className={style.avaImg} alt='' src={profile.photos.large || userPhoto} />\n                {isOwner && <input type='file' onChange={onMainPhotoSelected} />}\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n            </div>\n\n            {editMode\n                ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\n                : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />}\n        </div>\n    );\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\n    return (\n        <div>\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\n\n            <div><b>Full name: </b>{profile.fullName}</div>\n            <div><b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}</div>\n\n            {profile.lookingForAJob &&\n                <div><b>My professonal skills: </b>{profile.lookingForAJobDescription}</div>\n            }\n\n            <div><b>About me: </b>{profile.aboutMe}</div>\n            <div><b>Contacts: </b>{\n                Object\n                    .keys(profile.contacts)\n                    .map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n                    })}</div>\n        </div>\n    )\n}\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nexport const Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\n    return (\n        <div className={style.contact}>\n            <b>{contactTitle}: </b>{contactValue}\n        </div>\n    )\n}","import { ProfileType } from '../../types/types';\nimport { MyPostsContainer } from './myposts/myposts-container';\nimport { ProfileInfo } from './profile-info/profile-info';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nexport const Profile: React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile} />\n            <MyPostsContainer />\n        </div>\n    );\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Profile } from './profile';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport { useMatch, RouteComponentProps } from 'react-router-dom';\nimport { withAuthRedirect } from '../hoc/with-auth-redirect';\nimport { AppStateType } from '../../redux/redux-store';\nimport { ProfileType } from '../../types/types';\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\ntype PathParamsType = {\n    userId: string\n}\n\n//todo RouteComponentProps isn't exist anymore\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\n\nexport class ProfileAPIComponent extends React.Component<PropsType>{\n\n    refreshProfile = () => {\n        let userId: number | null = this.props.match ? this.props.match.params.userId : this.props.authorizedUserId\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match && this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        } else if (!this.props.match && this.props.match !== prevProps.match) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                isOwner={this.props.authorizedUserId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile} />\n        );\n    }\n}\n\nlet AuthRedirectComponent = withAuthRedirect(ProfileAPIComponent)\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n})\n\n//todo fix type\nconst ProfileURLMatch = (props: any) => {\n    const match = useMatch('/profile/:userId');\n    return <AuthRedirectComponent {...props} match={match} />;\n}\n\nexport const ProfileContainer = connect(mapStateToProps, {\n    getUserProfile, getStatus,\n    updateStatus, savePhoto, saveProfile\n})(ProfileURLMatch)\n\n","import { reduxForm, Field, InjectedFormProps } from 'redux-form'\nimport { required } from '../../utils/validators/validators'\nimport { Input } from '../common/forms-controls/forms-controls'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../../redux/auth-reducer'\nimport { Navigate } from 'react-router-dom'\nimport style from '../common/forms-controls/forms-controls.module.css'\nimport { AppStateType } from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\nexport type LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\n\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (\n    { handleSubmit, error, captchaUrl }) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={'email'} name={'email'} component={Input}\n                    validate={[required]} />\n            </div>\n            <div>\n                <Field placeholder={'password'} name={'password'} component={Input}\n                    validate={[required]} type={'password'} />\n            </div>\n            <div>\n                <Field type={'checkbox'} name={'rememberMe'} component={Input} /> remember me\n            </div>\n\n            {captchaUrl && <img src={captchaUrl} alt='' />}\n            {captchaUrl && <Field placeholder={'symbols from image'} name={'captcha'} component={Input}\n                validate={[required]} />}\n\n            {error && <div className={style.form_summary_error}>\n                {error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm)\n\n// type LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\n\nexport const LoginPage: React.FC = () => {\n\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Navigate replace to='/profile' />\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n        </div>\n    )\n}\n","import { AppStateType } from './redux-store'\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\n\n\n","import { Link, NavLink } from 'react-router-dom';\nimport style from './header.module.css';\nimport { Layout, Menu, Avatar, Row, Col, Button } from 'antd'\nimport { UploadOutlined, UserOutlined, VideoCameraOutlined } from '@ant-design/icons'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentUserLogin, selectIsAuth } from '../../redux/auth-selectors';\nimport { logout } from '../../redux/auth-reducer';\n\n\nexport const Header: React.FC = (props) => {\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentUserLogin)\n\n    const dispatch = useDispatch()\n    const logoutCallback = () => {\n        dispatch(logout())\n    }\n\n    const { Header } = Layout\n\n    return (\n\n        <Header className=\"site-layout-sub-header-background\" style={{ padding: 0 }}>\n            <Row>\n                <Col span={18}></Col>\n\n                {isAuth\n                    ? <>\n                        <Col span={1}>\n                            <Avatar style={{ backgroundColor: '#31af92' }} icon={<UserOutlined />} />\n                        </Col>\n                        <Col span={2} className={style.name}>\n                            {login}\n                        </Col>\n                        <Col span={1}>\n                            <Button onClick={logoutCallback}>Log out</Button>\n                        </Col>\n                    </>\n                    : <Col span={2}>\n                        <Button>\n                            <Link to='/login'>Login</Link>\n                        </Button>\n                    </Col>\n                }\n            </Row>\n\n        </Header>\n\n        // <header className={style.header}>\n        //     <img src='https://cdn3.iconfinder.com/data/icons/essentials-volume-i/128/origami-bird-5-512.png' alt='' />\n\n        //     <div className={style.loginBlock}>\n        //         {props.isAuth\n        //             ? <div>{props.login}  <button onClick={props.logout}>Log out</button></div>\n        //             : <NavLink to='/login'>Login</NavLink>}\n        //     </div>\n        // </header>\n    );\n}\n\n\n","import { useEffect, useState } from \"react\"\n\n\nexport type ChatMessageType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\n\nexport const ChatPage: React.FC = () => {\n    return (\n        <div>\n            <Chat />\n        </div>\n    )\n}\n\nconst Chat: React.FC = () => {\n\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\n\n    useEffect(() => {\n        let ws: WebSocket\n\n        const closeHandler = () => {\n            console.log('CLOSE WS')\n            setTimeout(createChannel, 3000)\n        }\n\n        function createChannel() {\n            ws?.removeEventListener('close', closeHandler)\n            ws?.close()\n\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n            ws.addEventListener('close', closeHandler)\n            setWsChannel(ws)\n        }\n        createChannel()\n\n        return () => {\n            ws.removeEventListener('close', closeHandler)\n            ws.close()\n        }\n    }, [])\n\n    useEffect(() => {\n        wsChannel?.addEventListener('close', () => {\n            console.log(\"CLOSE\")\n        })\n    }, [wsChannel])\n\n    return (\n        <div>\n            <Messages wsChannel={wsChannel} />\n            <AddMessageForm wsChannel={wsChannel} />\n        </div>\n    )\n}\n\nconst Messages: React.FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\n\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\n\n    useEffect(() => {\n        debugger\n\n        let messageHandler = (e: MessageEvent) => {\n            let newMessages = JSON.parse(e.data)\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\n        }\n        debugger\n        wsChannel?.addEventListener('message', messageHandler)\n\n        return () => {\n            wsChannel?.removeEventListener('message', messageHandler)\n        }\n    }, [wsChannel])\n\n    return (\n        <div style={{ height: '400px', overflowY: 'auto' }}>\n            {messages.map((m, index) => <Message message={m} key={index} />)}\n        </div>\n    )\n}\n\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => {\n    return (\n        <div>\n            <img src={message.photo} style={{ width: '50px' }} alt='' /> <b>{message.userName}</b>\n            <br />\n            {message.message}\n            <hr />\n        </div>\n    )\n}\n\nconst AddMessageForm: React.FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\n\n    const [message, setMessage] = useState('')\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\n\n    useEffect(() => {\n        let openHandler = () => {\n            setReadyStatus('ready')\n        }\n\n        wsChannel?.addEventListener('open', openHandler)\n\n        return () => {\n            wsChannel?.removeEventListener('open', openHandler)\n        }\n    }, [wsChannel])\n\n    const sendMessage = () => {\n        if (!message) {\n            return\n        }\n        wsChannel?.send(message)\n        setMessage('')\n    }\n\n    return (\n        <div>\n            <div>\n                <textarea onChange={(e) => { setMessage(e.currentTarget.value) }} value={message}></textarea>\n            </div>\n            <div>\n                <button disabled={wsChannel === null && readyStatus !== 'ready'} onClick={sendMessage}>Send</button>\n            </div>\n        </div>\n    )\n}","import 'antd/dist/antd.css'\nimport './App.css'\nimport { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { BrowserRouter, HashRouter, Link, Route, Routes } from 'react-router-dom'\nimport { News } from './components/news/news'\nimport { Music } from './components/music/music'\nimport { Settings } from './components/settings/settings'\nimport { DialogsContainer } from './components/dialogs/dialogs-container'\nimport { UsersPage } from './components/users/users-container'\nimport { ProfileContainer } from './components/profile/profile-container'\nimport { LoginPage } from './components/login/login'\nimport { initializeApp } from './redux/app-reducer'\nimport { Preloader } from './components/common/preloader/preloader'\nimport { AppStateType } from './redux/redux-store'\nimport { Layout, Menu } from 'antd'\nimport { SoundOutlined, UserOutlined, MessageOutlined, TeamOutlined, SettingOutlined, GlobalOutlined, CommentOutlined } from '@ant-design/icons'\nimport { Header } from './components/header/header'\nimport { ChatPage } from './pages/chat/chat-page'\n\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst { Content, Footer, Sider } = Layout\n\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert('some error occured!')\n  }\n\n  componentDidMount() {\n    this.props.initializeApp()\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n  }\n\n  componentWillUnmount() {\n    this.props.initializeApp()\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n  }\n\n  render() {\n\n    if (!this.props.initialized) { return <Preloader /> }\n\n    return (\n      <BrowserRouter>\n        <Layout>\n          <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            onBreakpoint={broken => {\n              console.log(broken);\n            }}\n            onCollapse={(collapsed, type) => {\n              console.log(collapsed, type);\n            }}\n            style={{ background: '#33937d' }}\n          >\n            <div className=\"logo\" >\n              <img src='https://cdn4.iconfinder.com/data/icons/origamicon-light/512/facebook-512.png'\n                alt='' style={{ width: '35px', height: '35px' }} />\n            </div>\n\n\n            <Menu theme=\"dark\"\n              mode=\"inline\"\n              defaultSelectedKeys={['1']}\n              style={{ margin: '10px 0', background: '#33937d', height: '100vh' }}\n            >\n              <Menu.Item key=\"1\" icon={<UserOutlined />}>\n                <Link to='/profile'>Profile</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\" icon={<MessageOutlined />}>\n                <Link to='/dialogs'>Messages</Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\" icon={<CommentOutlined />}>\n                <Link to='/chat'>Chat</Link>\n              </Menu.Item>\n              <Menu.Item key=\"4\" icon={<TeamOutlined />}>\n                <Link to='/users'>Users</Link>\n              </Menu.Item>\n              <Menu.Item key=\"5\" icon={<GlobalOutlined />}>\n                <Link to='/news'>News</Link>\n              </Menu.Item>\n              <Menu.Item key=\"6\" icon={<SoundOutlined />}>\n                <Link to='/music'>Music</Link>\n              </Menu.Item>\n              <Menu.Item key=\"7\" icon={<SettingOutlined />}>\n                <Link to='/settings'>Settings</Link>\n              </Menu.Item>\n            </Menu>\n\n          </Sider>\n\n          <Layout>\n            <Header />\n\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                <Routes>\n                  <Route path='/' element={<ProfileContainer />} />\n                  <Route path='/profile/*' element={<ProfileContainer />} />\n                  <Route path='/dialogs/*' element={<DialogsContainer />} />\n                  <Route path='/news' element={<News />} />\n                  <Route path='/music' element={<Music />} />\n                  <Route path='/settings' element={<Settings />} />\n                  <Route path='/users/*' element={<UsersPage />} />\n                  <Route path='/login' element={<LoginPage />} />\n                  <Route path='/chat' element={<ChatPage />} />\n                  <Route path='*' element={<div>404 NOT FOUND</div>} />\n                </Routes>\n              </div>\n            </Content>\n\n            {/* <Footer style={{ textAlign: 'center' }}></Footer> */}\n\n          </Layout>\n        </Layout>\n      </BrowserRouter >\n\n\n      // <BrowserRouter>\n      //   <div className='app-wrapper'>\n\n      //     <HeaderContainer />\n      //     <Navbar />\n\n      //     <div className='app-wrapper-content'>\n      //       <Routes>\n      //         <Route path='/' element={<ProfileContainer />} />\n      //         <Route path='/profile/*' element={<ProfileContainer />} />\n      //         <Route path='/dialogs/*' element={<DialogsContainer />} />\n      //         <Route path='/news' element={<News />} />\n      //         <Route path='/music' element={<Music />} />\n      //         <Route path='/settings' element={<Settings />} />\n      //         <Route path='/users/*' element={<UsersPage />} />\n      //         <Route path='/login' element={<LoginPage />} />\n      //         <Route path='*' element={<div>404 NOT FOUND</div>} />\n      //       </Routes>\n      //     </div>\n      //   </div>\n      // </BrowserRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n})\n\nexport default connect(mapStateToProps, { initializeApp })(App);","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/redux-store';\nimport App from './App';\nimport { Provider } from 'react-redux';\n\n\n\nReactDOM.render(\n\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__2B_-5\",\"dialogsItems\":\"dialogs_dialogsItems__1oy2F\",\"active\":\"dialogs_active__25GoT\",\"messages\":\"dialogs_messages__3lqZz\",\"message\":\"dialogs_message__1Id2-\",\"avatar\":\"dialogs_avatar__1E0OZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"users_userWrapper__1-RgG\",\"userAvatar\":\"users_userAvatar__27hzp\",\"userPhoto\":\"users_userPhoto__2Bfxq\",\"userProfile\":\"users_userProfile__2FCfd\",\"userInfo\":\"users_userInfo__FCKvA\",\"userStatus\":\"users_userStatus__2kVln\",\"userFrom\":\"users_userFrom__2Y8i8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"profile-info_descriptionBlock__BbrXa\",\"avaImg\":\"profile-info_avaImg__3BMVw\",\"mainImg\":\"profile-info_mainImg__3Pj9d\",\"contact\":\"profile-info_contact__3heCU\",\"error\":\"profile-info_error__3LOn4\",\"form_summary_error\":\"profile-info_form_summary_error__165MW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"paginator_pages__1iImD\",\"selectedPage\":\"paginator_selectedPage__2HpBs\",\"notSelectedPage\":\"paginator_notSelectedPage__qJzTi\",\"button_arrow\":\"paginator_button_arrow__4ky-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"forms-controls_error__EfMst\",\"form_summary_error\":\"forms-controls_form_summary_error__2etxr\"};"],"sourceRoot":""}